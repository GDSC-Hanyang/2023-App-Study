# 1주차 과제

## 1번 문제

**`enum`의 장점은 무엇인가요?**

- **`enum`**을 사용하는 이유는 무엇인가요? 어떤 장점이 있나요?

### 1번 답변

<!-- enum은 한 변수의 값을 몇 가지로 제한할 때 사용합니다. String으로 대체할 수 있지만 enum은 자동 완성이 지원되고 정확히 어떤 선택지가 존재하는지 정의해둘 수 있기 때문에 유용합니다. 예를 들어, team, color, margin, padding, style, aligning 등 많은 옵션을 적용할 때 오탈자를 방지하는 역할을 합니다. 
-->

## 2번 문제

1. **`People`** 클래스는 이름(**`name`**)과 나이(**`age`**)를 가진 사람을 나타내는 기본 클래스입니다. **`sayHello`** 메서드는 이름과 나이를 출력합니다.
2. **`Team`** enum은 여러 팀을 나타내는 enum입니다. (Enum 의 상수는 자유롭게 하시면 됩니다)
3. **`Student`** 클래스는 **`People`** 클래스를 상속합니다. 추가로 **`team`** 멤버 변수를 가지며, 생성자에서 **`name`**, **`age`**, **`team`**을 필수 매개변수로 받습니다. 부모 클래스인 **`People`**의 생성자를 호출하여 **`name`**과 **`age`**를 초기화합니다.
4. **`Student`** 클래스에서는 **`sayHello`** 메서드를 재정의하여 부모 클래스의 **`sayHello`**를 호출한 후 **`team`** 멤버 변수의 값을 출력합니다.
5. **`main`** 함수에서 **`Student`** 객체를 생성하고 **`sayHello`** 메서드를 호출합니다. 이로 인해 학생의 이름, 나이 및 팀이 출력됩니다.

<출력 예시>

(출력 예시는 예시일 뿐 같을 필요는 없습니다!!)


주어진 코드를 바탕으로 아래 기능을 구현하기 위한 코드를 작성해주시고, 실행한 결과값을 캡쳐하여 아래 붙여넣어주세요.

### 2번 답변

<코드>
```dart
//코드를 여기 작성해주세요

enum Team { app, web, server, mLdL }

class People {
  String name;
  int age;

  People({required this.name, required this.age});

  void sayHello() {
    print('안녕하세요. ${name}, ${age}살 입니다.');
  }
}

class Student extends People {
  late Team team;

  Student({
    required String name,
    required int age,
    required Team team,
  }) : super(name: name, age: age) {
    this.team = team;
  }

  @override
  void sayHello() {
    super.sayHello();
    print('파트는 ${this.team.name}입니다');
  }
}

void main() {
  Student student = Student(name: '박시형', age: 25, team: Team.app);
  student.sayHello();
}
```
<결과>
<!-- 캡쳐본을 여기에 넣어주세요 -->
